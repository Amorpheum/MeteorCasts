{"version":3,"sources":["meteor://ðŸ’»app/imports/collections/links.js","meteor://ðŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA,OAAO,OAAP,CAAe;AACb;AAAgB,yBAAS,GAAT,EAAc;AAC5B,wBAAM,GAAN,EAAW,aAAM,KAAN,CAAY;eAAO,sBAAS,KAAT,CAAe,GAAf;OAAP,CAAvB;;;AAD4B,UAItB,QAAQ,KAAK,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,KAA3B,CAAiC,CAAC,CAAD,CAAzC,CAJsB;AAK5B,YAAM,MAAN,CAAa,EAAE,QAAF,EAAO,YAAP,EAAc,QAAQ,CAAR,EAA3B,EAL4B;KAAd;;;KAAhB;CADF;;AAUO,IAAM,wBAAQ,IAAI,aAAM,UAAN,CAAiB,OAArB,CAAR,uC;;;;;;;;;;;ACdb;;AACA;;AACA;;AACA;;;;;;AAEA,eAAO,OAAP,CAAe,YAAM;AACnB,iBAAO,OAAP,CAAe,OAAf,EAAwB,YAAW;AACjC,WAAO,aAAM,IAAN,CAAW,EAAX,CAAP,CADiC;GAAX,CAAxB,CADmB;CAAN,CAAf;;;;AAQA,SAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,IAA3B,EAAiC;;;AAG/B,MAAM,OAAO,aAAM,OAAN,CAAc,EAAE,OAAO,IAAI,MAAJ,CAAW,KAAX,EAAvB,CAAP,CAHyB;;AAK/B,MAAI,IAAJ,EAAU;;;AAGR,iBAAM,MAAN,CAAa,IAAb,EAAmB,EAAE,MAAM,EAAE,QAAQ,CAAR,EAAR,EAArB,EAHQ;AAIR,QAAI,SAAJ,CAAc,GAAd,EAAmB,EAAE,YAAY,KAAK,GAAL,EAAjC,EAJQ;AAKR,QAAI,GAAJ,GALQ;GAAV,MAMO;;;AAGL,WAHK;GANP;CALF;;AAkBA,IAAM,aAAa,+BAAa,UAAS,MAAT,EAAiB;AAC/C,SAAO,GAAP,CAAW,SAAX,EAAsB,OAAtB,EAD+C;CAAjB,CAA1B;;AAIN,eAAO,eAAP,CAAuB,GAAvB,CAA2B,UAA3B,0D","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport validUrl from 'valid-url';\nimport { check, Match } from 'meteor/check';\n\nMeteor.methods({\n  'links.insert': function(url) {\n    check(url, Match.Where(url => validUrl.isUri(url)));\n\n    // We're ready to save the url\n    const token = Math.random().toString(36).slice(-5);\n    Links.insert({ url, token, clicks: 0 });\n  }\n});\n\nexport const Links = new Mongo.Collection('links');\n","import { Meteor } from 'meteor/meteor';\nimport { Links } from '../imports/collections/links';\nimport { WebApp } from 'meteor/webapp';\nimport ConnectRoute from 'connect-route';\n\nMeteor.startup(() => {\n  Meteor.publish('links', function() {\n    return Links.find({});\n  });\n});\n\n// Executed whenever a user visits with a route like\n// 'localhost:3000/abcd'\nfunction onRoute(req, res, next) {\n  // Take the token out of hte url and try to a find a\n  // matching link in the Links collection\n  const link = Links.findOne({ token: req.params.token });\n\n  if (link) {\n    // If we find a link object, redirect the user to the\n    // long URL\n    Links.update(link, { $inc: { clicks: 1 }});\n    res.writeHead(307, { 'Location': link.url });\n    res.end();\n  } else {\n    // If we don't find a link object, send the user\n    // to our normal React app\n    next();\n  }\n}\n\nconst middleware = ConnectRoute(function(router) {\n  router.get('/:token', onRoute);\n});\n\nWebApp.connectHandlers.use(middleware);\n"]}