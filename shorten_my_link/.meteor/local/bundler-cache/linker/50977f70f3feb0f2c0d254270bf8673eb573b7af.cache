[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"collections\":{\"links.js\":[\"meteor/mongo\",\"valid-url\",\"meteor/check\",function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// imports/collections/links.js                                                                   //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nexports.__esModule = true;                                                                        //\nexports.Links = undefined;                                                                        //\n                                                                                                  //\nvar _mongo = require('meteor/mongo');                                                             // 1\n                                                                                                  //\nvar _validUrl = require('valid-url');                                                             // 2\n                                                                                                  //\nvar _validUrl2 = _interopRequireDefault(_validUrl);                                               //\n                                                                                                  //\nvar _check = require('meteor/check');                                                             // 3\n                                                                                                  //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n                                                                                                  //\nMeteor.methods({                                                                                  // 5\n  'links.insert': function () {                                                                   // 6\n    function linksInsert(url) {                                                                   // 6\n      (0, _check.check)(url, _check.Match.Where(function (url) {                                  // 7\n        return _validUrl2['default'].isUri(url);                                                  //\n      }));                                                                                        //\n                                                                                                  //\n      // We're ready to save the url                                                              //\n      var token = Math.random().toString(36).slice(-5);                                           // 6\n      Links.insert({ url: url, token: token, clicks: 0 });                                        // 11\n    }                                                                                             //\n                                                                                                  //\n    return linksInsert;                                                                           //\n  }()                                                                                             //\n});                                                                                               //\n                                                                                                  //\nvar Links = exports.Links = new _mongo.Mongo.Collection('links');                                 // 15\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/collections/links\",\"meteor/webapp\",\"connect-route\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// server/main.js                                                                                 //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar _meteor = require('meteor/meteor');                                                           // 1\n                                                                                                  //\nvar _links = require('../imports/collections/links');                                             // 2\n                                                                                                  //\nvar _webapp = require('meteor/webapp');                                                           // 3\n                                                                                                  //\nvar _connectRoute = require('connect-route');                                                     // 4\n                                                                                                  //\nvar _connectRoute2 = _interopRequireDefault(_connectRoute);                                       //\n                                                                                                  //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n                                                                                                  //\n_meteor.Meteor.startup(function () {                                                              // 6\n  _meteor.Meteor.publish('links', function () {                                                   // 7\n    return _links.Links.find({});                                                                 // 8\n  });                                                                                             //\n});                                                                                               //\n                                                                                                  //\n// Executed whenever a user visits with a route like                                              //\n// 'localhost:3000/abcd'                                                                          //\nfunction onRoute(req, res, next) {                                                                // 14\n  // Take the token out of hte url and try to a find a                                            //\n  // matching link in the Links collection                                                        //\n  var link = _links.Links.findOne({ token: req.params.token });                                   // 17\n                                                                                                  //\n  if (link) {                                                                                     // 19\n    // If we find a link object, redirect the user to the                                         //\n    // long URL                                                                                   //\n    _links.Links.update();                                                                        // 22\n    res.writeHead(307, { 'Location': link.url });                                                 // 23\n    res.end();                                                                                    // 24\n  } else {                                                                                        //\n    // If we don't find a link object, send the user                                              //\n    // to our normal React app                                                                    //\n    next();                                                                                       // 28\n  }                                                                                               //\n}                                                                                                 //\n                                                                                                  //\nvar middleware = (0, _connectRoute2['default'])(function (router) {                               // 32\n  router.get('/:token', onRoute);                                                                 // 33\n});                                                                                               //\n                                                                                                  //\n_webapp.WebApp.connectHandlers.use(middleware);                                                   // 36\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/collections/links.js","/server/main.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA,OAAO,OAAP,CAAe;AACb;AAAgB,yBAAS,GAAT,EAAc;AAC5B,wBAAM,GAAN,EAAW,aAAM,KAAN,CAAY;eAAO,sBAAS,KAAT,CAAe,GAAf;OAAP,CAAvB;;;AAD4B,UAItB,QAAQ,KAAK,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,KAA3B,CAAiC,CAAC,CAAD,CAAzC,CAJsB;AAK5B,YAAM,MAAN,CAAa,EAAE,QAAF,EAAO,YAAP,EAAc,QAAQ,CAAR,EAA3B,EAL4B;KAAd;;;KAAhB;CADF;;AAUO,IAAM,wBAAQ,IAAI,aAAM,UAAN,CAAiB,OAArB,CAAR,uC;;;;;;;;;;;ACdb;;AACA;;AACA;;AACA;;;;;;AAEA,eAAO,OAAP,CAAe,YAAM;AACnB,iBAAO,OAAP,CAAe,OAAf,EAAwB,YAAW;AACjC,WAAO,aAAM,IAAN,CAAW,EAAX,CAAP,CADiC;GAAX,CAAxB,CADmB;CAAN,CAAf;;;;AAQA,SAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,IAA3B,EAAiC;;;AAG/B,MAAM,OAAO,aAAM,OAAN,CAAc,EAAE,OAAO,IAAI,MAAJ,CAAW,KAAX,EAAvB,CAAP,CAHyB;;AAK/B,MAAI,IAAJ,EAAU;;;AAGR,iBAAM,MAAN,GAHQ;AAIR,QAAI,SAAJ,CAAc,GAAd,EAAmB,EAAE,YAAY,KAAK,GAAL,EAAjC,EAJQ;AAKR,QAAI,GAAJ,GALQ;GAAV,MAMO;;;AAGL,WAHK;GANP;CALF;;AAkBA,IAAM,aAAa,+BAAa,UAAS,MAAT,EAAiB;AAC/C,SAAO,GAAP,CAAW,SAAX,EAAsB,OAAtB,EAD+C;CAAjB,CAA1B;;AAIN,eAAO,eAAP,CAAuB,GAAvB,CAA2B,UAA3B,0D","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport validUrl from 'valid-url';\nimport { check, Match } from 'meteor/check';\n\nMeteor.methods({\n  'links.insert': function(url) {\n    check(url, Match.Where(url => validUrl.isUri(url)));\n\n    // We're ready to save the url\n    const token = Math.random().toString(36).slice(-5);\n    Links.insert({ url, token, clicks: 0 });\n  }\n});\n\nexport const Links = new Mongo.Collection('links');\n","import { Meteor } from 'meteor/meteor';\nimport { Links } from '../imports/collections/links';\nimport { WebApp } from 'meteor/webapp';\nimport ConnectRoute from 'connect-route';\n\nMeteor.startup(() => {\n  Meteor.publish('links', function() {\n    return Links.find({});\n  });\n});\n\n// Executed whenever a user visits with a route like\n// 'localhost:3000/abcd'\nfunction onRoute(req, res, next) {\n  // Take the token out of hte url and try to a find a\n  // matching link in the Links collection\n  const link = Links.findOne({ token: req.params.token });\n\n  if (link) {\n    // If we find a link object, redirect the user to the\n    // long URL\n    Links.update();\n    res.writeHead(307, { 'Location': link.url });\n    res.end();\n  } else {\n    // If we don't find a link object, send the user\n    // to our normal React app\n    next();\n  }\n}\n\nconst middleware = ConnectRoute(function(router) {\n  router.get('/:token', onRoute);\n});\n\nWebApp.connectHandlers.use(middleware);\n"]}}]